# -*- coding: utf-8 -*-
"""KevinAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11D4gQznqVNzi_thNiQdJ5ZsjJpYrK9wa
"""

# Importing the dependecies
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from xgboost import XGBRegressor



#Loading the data from csv file to panda dataframe
cars_data = pd.read_csv('/content/Dataset_with_USD_Prices_Only.csv')

#Inspecting the first 5 rows of the daraframe
cars_data.head()

#Checking the number of rows and columns
cars_data.shape

#Get information about the dataset (Null and Objects)
cars_data.info()

#Checking the number of missing values
cars_data.isnull().sum()

#Checking the distribution of categorical data
print(cars_data.Fuel_Type.value_counts())
print(cars_data.Seller_Type.value_counts())
print(cars_data.Transmission.value_counts())

#Visualizing the distribution of the target variable (Selling_Price)
plt.figure(figsize=(8, 5))
sns.histplot(cars_data['Selling_Price_USD'], kde=True)
plt.title('Distribution of Selling Price')
plt.xlabel('Selling Price')
plt.ylabel('Frequency')
plt.show()

#Visualizing the distribution of the target variable (Present_Price)
plt.figure(figsize=(8, 5))
sns.histplot(cars_data['Present_Price_USD'], kde=True)
plt.title('Distribution of Present Price')
plt.xlabel('Present Price')
plt.ylabel('Frequency')
plt.show()

#Visualizing the distribution of the target variable (Kms_Driven)
plt.figure(figsize=(8, 5))
sns.histplot(cars_data['Kms_Driven'], kde=True)
plt.title('Distribution of Kilometers Driven')
plt.xlabel('Kms_Driven')
plt.ylabel('Frequency')
plt.show()

fig = plt.figure(figsize=[15,3])
plt.subplot(1,2,1)
sns.boxplot(x="Selling_Price_USD",data=cars_data)
plt.title("Selling_Price (outliers)")
plt.show()

fig = plt.figure(figsize=[15,3])
plt.subplot(1,2,1)
sns.boxplot(x="Present_Price_USD",data=cars_data)
plt.title("Present_Price (outliers)")
plt.show()

fig = plt.figure(figsize=[15,3])
plt.subplot(1,2,1)
sns.boxplot(x="Kms_Driven",data=cars_data)
plt.title("Kms_Driven (outliers)")
plt.show()

#One hot encoding for categorical features
cars_data = pd.get_dummies(cars_data, columns=['Fuel_Type','Seller_Type','Transmission'],drop_first=True)

#Checking if the encoding is done properly (First 5 rows)
cars_data.head()

#Splitting the data into X and Y
X=cars_data.drop(['Car_Name','Selling_Price_USD'],axis=1)
y=cars_data['Selling_Price_USD']

X.head()

y.head()

#Training and testing split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state=2)

# Scale only numerical features
scaler = StandardScaler()
num_cols = ['Kms_Driven', 'Present_Price_USD','Owner']
X_train[num_cols] = scaler.fit_transform(X_train[num_cols])
X_test[num_cols] = scaler.transform(X_test[num_cols])

X_train[num_cols].head()

#Loading the linear regression model
lre = LinearRegression()

lre.fit(X_train,y_train)

#Initialize and train the XGBoost regression model
xgb_model = XGBRegressor()
xgb_model.fit(X_train, y_train)

#Initialize and train the Random Forest Regression
rf_model = RandomForestRegressor()
rf_model.fit(X_train, y_train)

#Prediction on training data
y_pred = lre.predict(X_train)
y_pred_xgb = xgb_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)

#Evaluating the model
def evaluate_model(name,y_true,y_pred):
  mse = mean_squared_error(y_true, y_pred)
  r2 = r2_score(y_true, y_pred)
  print(f"{name}:")
  print(f"Mean Squared Error: {mse:.2f}")
  print(f"R2 Score: {r2:.4f}\n")

evaluate_model("XGBoost Regression",y_test,y_pred_xgb)
evaluate_model("Random Forest Regression",y_test,y_pred_rf)

from logging import error
#MSE and R squared Error
mse_score=metrics.mean_squared_error(y_train, y_pred)
r2_score=metrics.r2_score(y_train, y_pred)

#Printing the MSE and R squared Error
print(f"MSE Score: {mse_score:3f}")
print(f"R2 Score: {r2_score:.3f}")

#Visualize the actual prices and the predicted prices
plt.scatter(y_train, y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

import pickle as pk

pk.dump(rf_model,open('model-2.pkl','wb'))
# Save scaler after training
pk.dump(scaler, open('scaler.pkl', 'wb'))



!pip install streamlit pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import pickle
# from PIL import Image
# import altair as alt
# 
# # Page Config
# st.set_page_config(page_title="Used Car Price Predictor", page_icon="üöó", layout="wide")
# 
# # Load model and scaler
# with open("model-2.pkl", "rb") as model_file:
#     model = pickle.load(model_file)
# 
# with open("logistic_model.pkl", "rb") as lmodel_file:
#     lmodel = pickle.load(lmodel_file)
# 
# with open("scaler.pkl", "rb") as scaler_file:
#     scaler = pickle.load(scaler_file)
# 
# # Title and Header Section
# st.title("üöó Used Car Price Prediction App")
# st.markdown("""
# <style>
#     .stApp {
#         background-color: #121212;
#         color: #e0e0e0;
#     }
#     h1 {
#         color: #f1c40f;
#         text-align: center;
#     }
#     .css-18e3th9 {
#         background-color: #1e1e1e !important;
#     }
#     .css-1d391kg {
#         color: #e0e0e0;
#     }
# </style>
# """, unsafe_allow_html=True)
# 
# image = Image.open("/content/car-price-preditcion-image.png")
# st.image(image, use_container_width=True)
# 
# st.markdown("""
# Welcome to the **Used Car Price Predictor**. Fill in the details below to get an estimated selling price and price category for your car.
# """)
# 
# st.sidebar.header("Enter Car Details")
# 
# # Sidebar Inputs
# present_price = st.sidebar.slider("Original Price (USD)", min_value=2000.0, max_value=50000.0, value=10000.0, step=500.0)
# year = st.sidebar.selectbox("Model Year", list(range(2003, 2017))[::-1])
# kms_driven = st.sidebar.slider("Kilometers Driven", min_value=500, max_value=250000, value=30000, step=1000)
# owner = st.sidebar.selectbox("Number of Previous Owners", [1, 2])
# fuel_type = st.sidebar.radio("Fuel Type", ["Petrol", "Diesel", "Electric"])
# seller_type = st.sidebar.radio("Seller Type", ["Dealer", "Individual"])
# transmission = st.sidebar.radio("Transmission", ["Manual", "Automatic"])
# 
# # Display Feature Overview
# st.subheader("üîç Feature Overview")
# 
# features = {
#     "Original Price (USD)": present_price,
#     "Model Year": year,
#     "Kilometers Driven": kms_driven
# }
# 
# cols = st.columns(len(features))
# for col, (label, value) in zip(cols, features.items()):
#     chart_df = pd.DataFrame({"Feature": [label], "Value": [value]})
#     bar = alt.Chart(chart_df).mark_bar(size=60, color="#f1c40f").encode(
#         x=alt.X("Feature:N", axis=alt.Axis(labelAngle=0)),
#         y="Value:Q",
#         tooltip=["Value"]
#     ).properties(height=200)
#     col.altair_chart(bar, use_container_width=True)
# 
# # Show Summary of Inputs
# st.subheader("üìü Summary of Selections")
# st.markdown(f"""
# - **Fuel Type:** {fuel_type}
# - **Seller Type:** {seller_type}
# - **Transmission:** {transmission}
# - **Previous Owners:** {owner}
# """)
# 
# # Encoding
# fuel_diesel = 1 if fuel_type == "Diesel" else 0
# fuel_petrol = 1 if fuel_type == "Petrol" else 0
# seller_individual = 1 if seller_type == "Individual" else 0
# transmission_manual = 1 if transmission == "Manual" else 0
# 
# input_data = pd.DataFrame([{
#     'Year': year,
#     'Kms_Driven': kms_driven,
#     'Owner': owner,
#     'Present_Price_USD': present_price,
#     'Fuel_Type_Diesel': fuel_diesel,
#     'Fuel_Type_Petrol': fuel_petrol,
#     'Seller_Type_Individual': seller_individual,
#     'Transmission_Manual': transmission_manual
# }])
# 
# # Scaling
# numeric_cols = ['Kms_Driven', 'Present_Price_USD', 'Owner']
# input_data[numeric_cols] = scaler.transform(input_data[numeric_cols])
# 
# # Prediction Buttons
# col1, col2 = st.columns(2)
# with col1:
#     if st.button("Predict Price"):
#         try:
#             prediction = model.predict(input_data)[0]
#             st.success("\U0001F4B0 Estimated Selling Price: **${:,.2f}**".format(prediction))
#         except Exception as e:
#             st.error("‚ùå Prediction failed: {}".format(str(e)))
# 
# with col2:
#     if st.button("Predict Price Category"):
#         try:
#             prediction = lmodel.predict(input_data)
#             st.success("üèãÔ∏è‚Äç‚ôÇÔ∏è Price Category: **{}**".format(prediction[0]))
#         except Exception as e:
#             st.error("‚ùå Category prediction failed: {}".format(str(e)))
# 
#

!rm -rf ~/.ngrok2
!pip install --upgrade pyngrok

# Then run Streamlit and ngrok properly
from pyngrok import ngrok
import time


ngrok.set_auth_token("2yigaDVr5HIypRUjV8tIXgfQKCF_4NYQ9rvVWnqNKXi7Ki44d")
# Kill old processes
!pkill -f streamlit
ngrok.kill()

# Start Streamlit
!streamlit run app.py &> streamlit_log.txt &

# Wait for startup
time.sleep(5)

# Connect ngrok
public_url = ngrok.connect(8501)
print("üåê Public URL:", public_url)

# Show logs if needed

import streamlit as st
st.set_page_config(
    page_title="Car Price Predictor",
    page_icon="icon.png",  # local image
    layout="centered"
)